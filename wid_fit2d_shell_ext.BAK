function read_mdi, file
  a=0.0
  aaa=fltarr(8)
  b=''
  re=file_info(file)
  if re.exists eq 1 then $
  begin $
    get_lun, lu
    openr, lu, file
    ;------
    readf, lu, b ; read first line
    readf, lu, b ; read second line
    aa=strmid(b,1,6); step
    ste=float(aa)
    aa=strmid(b,7,3); start
    sta=float(aa)
    aa=strmid(b,12,8) ; wavelength
    print, aa
    aa=strmid(b,23,4); number of points
    N=long(aa)
    spc=fltarr(N,2)
    nn=long(N/8)
    nnn=N-nn*8
    for i=0, nn-1 do $
    begin
     readf, lu, aaa
     for j=0,7 do $
     begin
       k=i*8+j
       spc(k,0)=sta+ste*k
       spc(k,1)=aaa[j]
     endfor
    endfor
    bbb=fltarr(nnn)
    readf, lu, bbb
     for j=0,nnn-1 do $
     begin
       k=nn*8+j
       spc(k,0)=sta+ste*k
       spc(k,1)=aaa[j]
     endfor
    ;------
    close, lu
    plot, spc(*,0), spc(*,1)
    return, spc
  endif else return, [0,0]
end

;--------------------------------

function get_phase_selected

COMMON WID_fit2d_shell_elements, $
  WID_TAB_0, $    ;
  WID_TAB_1, $    ;
  WID_TAB_2, $    ;
  WID_TEXT_0, $   ; pressure
  WID_TEXT_1, $   ; peak fit window
  WID_TEXT_2, $   ; mltp step
  WID_TEXT_12, $   ; file name
  WID_TEXT_3, $   ; file name
  WID_TEXT_4, $   ; mask file
  WID_TEXT_5, $   ; mask file
  WID_TEXT_6, $   ; mask file
  WID_TEXT_7, $   ; phase scale step
  WID_TEXT_8, $   ; mask file
  WID_TEXT_9, $   ; mask file
  WID_TEXT_10, $   ; mask file
  WID_TEXT_11, $   ; mask file
  WID_TEXT_13, $   ; mltp
  WID_TEXT_14, $   ; mask file
  WID_TEXT_15, $   ; mask file
  WID_TEXT_22, $   ; mask file
  WID_TEXT_23, $   ; mask file
  WID_TEXT_83, $  ; bx
  WID_TEXT_82, $  ; by
  WID_TEXT_81, $  ; rot
  WID_TEXT_80, $  ; tilt
  WID_TEXT_16, $  ; wv
  WID_TEXT_17, $  ; dist
  WID_TEXT_18, $  ; py
  WID_TEXT_19, $  ; px
  WID_TEXT_20, $  ; wavelength (spectrum)
  WID_TEXT_21, $  ;   threshold mask
  WID_TEXT_24, $  ;   array x
  WID_TEXT_25, $  ;   array x
  WID_TEXT_26, $  ;   array x
  WID_TEXT_27, $  ;   array x
  WID_TEXT_28, $  ;   array x
  WID_TEXT_29, $  ;   array x
  WID_TEXT_30, $  ;   pressure step
  WID_TEXT_31, $  ;   destination directory
  WID_TEXT_32, $  ;   bcgr interval
  WID_TEXT_33, $  ;   tension
  WID_TEXT_34, $  ;   marigin
  WID_TEXT_35, $  ;   Q
  WID_TEXT_36, $  ;   phase scale
  WID_TEXT_37, $  ;   BG node change step
  WID_TEXT_38, $  ;   image directory
  WID_TEXT_39, $  ;   search peaks assigned
  WID_TEXT_40, $  ;   match intensity score
  WID_TEXT_41, $  ;   match v1
  WID_TEXT_42, $  ;   match v2
  WID_TEXT_43, $  ;   match v2
  WID_TEXT_44, $  ;   search minI
  WID_TEXT_45, $  ;   search I/s
  WID_TEXT_46, $  ;   search wind
  WID_TEXT_47, $  ;   searchsep
  WID_TEXT_85, $  ;   spectrum file series range
  WID_TEXT_86, $  ;   spectrum file series range
  WID_TEXT_87, $  ;   spectrum file series range
  WID_TEXT_88, $  ;   spectrum file series range
  WID_TEXT_89, $  ;   image series range
  WID_TEXT_90, $  ;   image series range
  WID_TEXT_91, $  ;   image series range
  WID_TEXT_92, $  ;   image series range
  WID_BUTTON_0, $ ; add reference
  WID_BUTTON_1, $ ; close
  WID_BUTTON_2, $ ; recalculate ref
  WID_BUTTON_3, $ ; delete ref
  WID_BUTTON_4, $ ; clear refs
  WID_BUTTON_5, $ ; BG show all nodes
  WID_BUTTON_6, $ ; Threshold  mask
  WID_BUTTON_7, $ ; overlay legend show
  WID_BUTTON_8, $ ; save plot as tiff
  WID_BUTTON_9, $ ; graphic output small
  WID_BUTTON_10, $ ; graphic output small
  WID_BUTTON_11, $ ; plot on printer
  WID_BUTTON_12, $ ; show phase legend
  WID_BUTTON_13, $ ; start fit2d
  WID_BUTTON_14, $ ; locate fit2d
  WID_BUTTON_15, $; unit cell refine
  WID_BUTTON_16, $; reset mlt
  WID_BUTTON_17, $; cal run
  WID_BUTTON_18, $; reset add
  WID_BUTTON_19, $; cal write
  WID_BUTTON_20, $; cal read
  WID_BUTTON_21, $; x axis 2theta
  WID_BUTTON_22, $; x axis dspc
  WID_BUTTON_23, $; spread overl.
  WID_BUTTON_24, $; =>>
  WID_BUTTON_25, $; reset all
  WID_BUTTON_26, $; integrate
  WID_BUTTON_27, $; open file
  WID_BUTTON_28, $; <
  WID_BUTTON_29, $; >
  WID_BUTTON_30, $; READ CHI
  WID_BUTTON_31, $; use mask
  WID_BUTTON_32, $; create mask
  WID_BUTTON_33, $; exchange
  WID_BUTTON_34, $; powder
  WID_BUTTON_35, $; o.k.
  WID_BUTTON_36, $; cancel
  WID_BUTTON_37, $; exit
  WID_BUTTON_38, $; next chi
  WID_BUTTON_39, $; previous chi
  WID_BUTTON_40, $; add overlay
  WID_BUTTON_41, $; delete BG node
  WID_BUTTON_42, $; overlay add
  WID_BUTTON_43, $; overlay del
  WID_BUTTON_44, $; overlay clear
  WID_BUTTON_45, $; overlay mlt -
  WID_BUTTON_46, $; overlay mlt +
  WID_BUTTON_47, $; mask change
  WID_BUTTON_48, $; mask clear
  WID_BUTTON_49, $; pressure -
  WID_BUTTON_50, $; pressure +
  WID_BUTTON_51, $; bcgr fit
  WID_BUTTON_52, $; bcgr subtract
  WID_BUTTON_53, $; fit peaks
  WID_BUTTON_54, $; z
  WID_BUTTON_55, $; z
  WID_BUTTON_56, $; z
  WID_BUTTON_57, $; z
  WID_BUTTON_58, $; z
  WID_BUTTON_59, $; z
  WID_BUTTON_60, $; set cal
  WID_BUTTON_61, $; get cal
  WID_BUTTON_62, $; save chi
  WID_BUTTON_62a, $; save chi
  WID_BUTTON_63, $; refine BG
  WID_BUTTON_64, $; use BG marigins
  WID_BUTTON_65, $; phase scale -
  WID_BUTTON_66, $; ovrlay sh +
  WID_BUTTON_67, $; ovrlay sh -
  WID_BUTTON_68, $; phase scale +
  WID_BUTTON_69, $; close fit2d
  WID_BUTTON_70, $; save background
  WID_BUTTON_71, $; truncate
  WID_BUTTON_72, $; profile Gauss
  WID_BUTTON_72a, $; profile Gauss
  WID_BUTTON_73, $; profile Lorentz
  WID_BUTTON_74, $; profile Pearson
  WID_BUTTON_75, $; profile pseudo Voigt
  WID_BUTTON_76, $; mask thr max
  WID_BUTTON_77, $; mask thr min
  WID_BUTTON_78, $; mask auto apply
  WID_BUTTON_79, $; BG node Y+
  WID_BUTTON_80, $; BG node Y-
  WID_BUTTON_81, $; destination directory pick
  WID_BUTTON_82, $; image directory
  WID_BUTTON_83, $; BG undo
  WID_BUTTON_84, $; autoprocess image
  WID_BUTTON_85, $; modify existing mask
  WID_BUTTON_86, $; subtract overlay
  WID_BUTTON_87, $; swap with principal
  WID_BUTTON_88, $; search
  WID_BUTTON_89, $; search delete
  WID_BUTTON_90, $; search save
  WID_BUTTON_91, $; search save
  WID_BUTTON_92, $; search save
  WID_BUTTON_93, $; delete overlay
  WID_BUTTON_94, $; delete overlay
  WID_BUTTON_95, $; delete overlay
  WID_BUTTON_96, $; delete overlay
  WID_BUTTON_97, $; delete overlay
  WID_BUTTON_98, $; save phase set
  WID_BUTTON_99, $; load phase set
  WID_BUTTON_100, $; load phase set
  WID_BUTTON_101, $; load phase set
  WID_DRAW_0, $      ;
  WID_DRAW_1, $      ;
  WID_DRAW_2, $      ;
  WID_DRAW_3, $      ;
  WID_LIST_0, $      ;
  WID_LIST_1, $      ; peak search list
  WID_LIST_10,$      ;
  WID_LIST_11,$      ;
  WID_LIST_2,$      ;
  WID_LIST_3,$      ;
  WID_SLIDER_0, $
  WID_SLIDER_1, $
  WID_SLIDER_2, $
  WID_DROPLIST_0,$   ; symmetry
  WID_DROPLIST_1,$   ; manual adjustment
  draw,$
  WID_BASE_1, $
  WID_BASE_38, $
  WID_BASE_20, $
  WID_fit2d_shell,$
  WID_BASE_21,$
  WID_BASE_22, $
  WIDImg_Button_27, $
  WIDImg_Text_12, $
  WIDImg_Draw_0

  common draw_reference, draw1, draw2, drawi

 ph=widget_info(wid_list_10, /list_select) ; phase
 return, ph
end

;----------------------------------------------
;--------------------------------
pro plot_image, oimage
common draw_reference

;COMMON WID_MAR345_elements
;COMMON image_type_and_arrays, imt, arr1, arr2
;common selections, selecting_status, select, excl, unselect, addpeak, mask, maskarr

   arr1=2048
   arr2=2048
   imax=1000
   imin=0
   maskarr=1.0
   im=oimage->get_object()
   data1=congrid(im.img[0:arr1-1,0:arr2-1]*maskarr, 550,550)
   ;widget_control, wid_text_24, get_value=imax
   ;widget_control, wid_text_25, get_value=imin


   imax=1000
   imin=0

   imax=long(imax)
   imin=long(imin)
   imax=imax[0]
   imin=imin[0]
   data1=data1<imax
   data1=data1>imin

   wset, drawI
   tvscl, data1, true=0
  end
;--------------------------------


function read_manual_choice
COMMON WID_fit2d_shell_elements
  AL=widget_INFO(wid_DROPLIST_1, /DROPLIST_SELECT)
  return, al
end

;----------------------------------------------


pro read_profile_function
COMMON WID_fit2d_shell_elements
common function_names, peak_fit_function
  AL1=widget_INFO(wid_button_72, /BUTTON_SET)
  AL2=widget_INFO(wid_button_73, /BUTTON_SET)
  AL3=widget_INFO(wid_button_74, /BUTTON_SET)
  AL4=widget_INFO(wid_button_75, /BUTTON_SET)
  if al1 eq 1 then peak_fit_function='GAUSS_PROFILE'
  if al2 eq 1 then peak_fit_function='LORENTZ_PROFILE'
  if al3 eq 1 then peak_fit_function='PEARSON7_PROFILE'
  if al4 eq 1 then peak_fit_function='PSEUDOVOIGT_PROFILE'
end

;----------------------------------------------

function auto_thershold_mask
COMMON WID_fit2d_shell_elements
  AL=widget_INFO(wid_button_78,/BUTTON_SET)
  AL1=widget_INFO(wid_button_76,/BUTTON_SET) ; max
  return, [al,al1]
end

;----------------------------------------------
function use_mask
COMMON WID_fit2d_shell_elements
  AL=widget_INFO(wid_button_31,/BUTTON_SET)
  return, al
end

;----------------------------------------------
function read_flat_background
COMMON WID_fit2d_shell_elements
  AL=widget_INFO(wid_button_72a, /BUTTON_SET)
  return, al
end

;----------------------------------------------

function read_manu_step
 COMMON WID_fit2d_shell_elements
 widget_control, wid_text_40, get_value=wv
 a=float(wv)
 return, wv[0]
end

;----------------------------------------------
function read_width_max
 COMMON WID_fit2d_shell_elements
 widget_control, wid_text_43, get_value=wv
 a=float(wv)
 return, wv[0]
end

;----------------------------------------------

function lambda
 COMMON WID_fit2d_shell_elements
 widget_control, wid_text_20, get_value=wv
 a=float(wv)
 return, wv[0]
end

;----------------------------------------------

function graphic_window_choice
COMMON WID_fit2d_shell_elements
 re1=widget_info(wid_button_10, /BUTTON_SET)
 return, re1
end

;----------------------------------------------

function peakfit_window
COMMON WID_fit2d_shell_elements
  widget_control, wid_text_1, get_value=sa
  sa=long(sa)
  return, sa
end

;----------------------------------------------
function apply_to_all
COMMON WID_fit2d_shell_elements
 re=widget_info(wid_button_88, /button_set)
 return, re
end
;----------------------------------------------



pro WID_fit2d_shell_ext
end